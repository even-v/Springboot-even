# log4j.rootLogger=level, appenderName, appenderName, …
# level：日志记录的优先级
#   |-  level分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL
#   |-  Log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG
#   |-  级别详解
#       |- off 最高等级，用于关闭所有日志记录。
#       |- fatal 指出每个严重的错误事件将会导致应用程序的退出。
#       |- error 指出虽然发生错误事件，但仍然不影响系统的继续运行。
#       |- warm 表明会出现潜在的错误情形。
#       |- info 一般和在粗粒度级别上，强调应用程序的运行全程。
#       |- debug 一般用于细粒度级别上，对调试应用程序非常有帮助。
#       |- all 最低等级，用于打开所有日志记录。
#   |-  通过在这里定义的级别，可以控制到应用程序中相应级别的日志信息的开关
#       比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来。
#
# appenderName：level级别的日志信息输出到哪个地方，可以同时指定多个输出目的地。
log4j.rootLogger=INFO,Console,File

# 定义日志输出目的地
# Log4j提供的appender有以下几种：
#   |- org.apache.log4j.ConsoleAppender（控制台）
#   |- org.apache.log4j.FileAppender（文件）
#   |- org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
#   |- org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
#   |- org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）

# 下面是输出到控制台的设置
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.Target=System.out
#可以灵活的指定日志输出格式，下面一行是指定具体的格式
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=[%c]-%m%n

# 下面是输出到指定文件
# 指定输出目录
log4j.appender.File.File = C:/andon/log/info-log-
#定义文件最大大小
#log4j.appender.File.MaxFileSize = 10MB
# 文件大小到达指定尺寸的时候产生一个新的文件
#log4j.appender.File = org.apache.log4j.RollingFileAppender
# 每天产生一个日志文件
log4j.appender.File = org.apache.log4j.DailyRollingFileAppender
# 输出所有warn 以上级别的日志，Threshold是个全局的过滤器，它将把低于所设置的level的信息过滤不显示出来。一般比log4j.rootLogger设置的等级高，否则没什么意义。
log4j.appender.File.Threshold = debug
# 日志后缀名
log4j.appender.File.DatePattern=yyyy-MM-dd'.log'
# 配置日志信息的格式（布局）
# Log4j提供的layout有以下几种：
#   |- org.apache.log4j.HTMLLayout（以HTML表格形式布局）
#   |- org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
#   |- org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）
#   |- org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
log4j.appender.File.layout = org.apache.log4j.PatternLayout
# 打印参数如下:
#   |- %m 输出代码中指定的消息
#   |- %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
#   |- %r 输出自应用启动到输出该log信息耗费的毫秒数 
#   |- %c 输出所属的类目，通常就是所在类的全名 
#   |- %t 输出产生该日志事件的线程名 
#   |- %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n” 
#   |- %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，
#       比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921 
#   |- %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。
#       举例：Testlog4.main(TestLog4.java:10)
log4j.appender.File.layout.ConversionPattern =[%p] [%d{yyyy-MM-dd HH\:mm\:ss}][%c]%m%n

#mybatis显示SQL语句日志配置  
#是此SSM项目接口所在的包名 
log4j.logger.cn.youchisoft.andon.mapper=DEBUG